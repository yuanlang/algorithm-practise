#!/usr/bin/python
# -*- coding: GBK -*-

# 旋转数组
# 给定一个数组，将数组中的元素向右移动?k?个位置，其中?k?是非负数。

# 示例 1:

# 输入: [1, 2, 3, 4, 5, 6, 7] 和 k = 3
# 输出: [5, 6, 7, 1, 2, 3, 4]
# 解释:
# 向右旋转 1 步: [7, 1, 2, 3, 4, 5, 6]
# 向右旋转 2 步: [6, 7, 1, 2, 3, 4, 5]
# 向右旋转 3 步: [5, 6, 7, 1, 2, 3, 4]
# 示例?2:

# 输入: [-1, -100, 3, 99] 和 k = 2
# 输出: [3, 99, -1, -100]
# 解释:
# 向右旋转 1 步: [99, -1, -100, 3]
# 向右旋转 2 步: [3, 99, -1, -100]
# 说明:

# 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
# 要求使用空间复杂度为?O(1) 的?原地?算法。

from typing import List

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        if n == 0:
            return
        for _i in range(k):
            #每次只移动一个数字
            #temp始终指向最后一个数字
            temp = nums[n-1]
            #从后向前复制
            for j in range(n-1, 0, -1):
                nums[j] = nums[j-1]
            nums[0] = temp
            # print(nums)

if __name__ == "__main__":
    s = Solution()
    nums = [1,2,3,4,5,6,7]
    s.rotate(nums, 3)
    print(nums)
    assert nums == [5, 6, 7, 1, 2, 3, 4]

    nums = [1,2,3,4,5,6,7]
    s.rotate(nums, 4)
    print(nums)
    assert nums == [4, 5, 6, 7, 1, 2, 3]

    nums = []
    s.rotate(nums, 3)
    print(nums, nums == [], len(nums))
    assert len(nums) == 0
